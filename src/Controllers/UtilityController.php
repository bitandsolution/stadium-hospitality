<?php

namespace Hospitality\Controllers;

use Hospitality\Middleware\AuthMiddleware;
use Hospitality\Middleware\RoleMiddleware;
use Hospitality\Utils\Logger;
use Hospitality\Utils\Validator;
use Hospitality\Config\Database;

class UtilityController {
    
    /**
     * POST /api/admin/utilities/generate-password-hash
     * Genera hash password per inserimento manuale utenti
     * Solo per super_admin
     */
    public function generatePasswordHash(): void {
        try {
            // Verifica autenticazione
            $decoded = AuthMiddleware::handle();
            if (!$decoded) return;
            
            // Solo super_admin può usare questa funzione
            if (!RoleMiddleware::requireRole('super_admin')) {
                return;
            }
            
            $input = $this->getJsonInput();
            
            // Validazione
            if (empty($input['password'])) {
                $this->sendError('Password is required', ['password' => 'This field is required'], 422);
                return;
            }
            
            // Valida requisiti password
            $passwordErrors = Validator::validatePassword($input['password']);
            if (!empty($passwordErrors)) {
                $this->sendError('Password validation failed', $passwordErrors, 422);
                return;
            }
            
            // Genera l'hash
            $hash = password_hash($input['password'], PASSWORD_DEFAULT, ['cost' => 12]);
            
            // Log dell'operazione (senza salvare la password)
            Logger::info('Password hash generated by super admin', [
                'user_id' => $decoded->user_id,
                'username' => $decoded->username
            ]);
            
            $this->sendSuccess([
                'hash' => $hash,
                'algorithm' => 'bcrypt',
                'cost' => 12,
                'info' => 'Use this hash in the password_hash column of the users table'
            ]);
            
        } catch (\Exception $e) {
            Logger::error('Failed to generate password hash', [
                'error' => $e->getMessage()
            ]);
            $this->sendError('Failed to generate password hash', [], 500);
        }
    }

    /**
     * POST /api/admin/utilities/bootstrap-super-admin
     * Crea il primo super admin - SOLO se non ne esistono
     * Protetto da token di bootstrap
     */
    public function bootstrapSuperAdmin(): void {
        try {
            // Token di sicurezza (MODIFICALO!)
            $BOOTSTRAP_TOKEN = getenv('BOOTSTRAP_TOKEN') ?: 'CHANGE_ME_IMMEDIATELY_XYZ789';
            
            $input = $this->getJsonInput();
            
            // Verifica token
            if (empty($input['bootstrap_token']) || $input['bootstrap_token'] !== $BOOTSTRAP_TOKEN) {
                Logger::warning('Invalid bootstrap token attempt', [
                    'ip' => $_SERVER['REMOTE_ADDR'] ?? 'unknown'
                ]);
                $this->sendError('Invalid bootstrap token', [], 403);
                return;
            }
            
            // Verifica che NON esistano già super admin
            $db = Database::getInstance()->getConnection();
            $stmt = $db->query("SELECT COUNT(*) as count FROM users WHERE role = 'super_admin' AND is_active = 1");
            $result = $stmt->fetch(\PDO::FETCH_ASSOC);
            
            if ($result['count'] > 0) {
                $this->sendError('Super admin already exists. This endpoint is disabled.', [], 403);
                return;
            }
            
            // Validazioni
            $errors = Validator::validateRequired($input, [
                'username', 'email', 'password', 'full_name'
            ]);
            
            if (!empty($input['email']) && !Validator::validateEmail($input['email'])) {
                $errors[] = 'Invalid email format';
            }
            
            if (!empty($input['password'])) {
                $passwordErrors = Validator::validatePassword($input['password']);
                $errors = array_merge($errors, $passwordErrors);
            }
            
            if (!empty($errors)) {
                $this->sendError('Validation failed', $errors, 422);
                return;
            }
            
            // Verifica duplicati
            $stmt = $db->prepare("SELECT id FROM users WHERE username = ? OR email = ?");
            $stmt->execute([$input['username'], $input['email']]);
            
            if ($stmt->rowCount() > 0) {
                $this->sendError('Username or email already exists', [], 409);
                return;
            }
            
            // Crea super admin
            $passwordHash = password_hash($input['password'], PASSWORD_DEFAULT, ['cost' => 12]);
            
            $stmt = $db->prepare("
                INSERT INTO users (
                    stadium_id, username, email, password_hash, role, 
                    full_name, is_active, created_at, created_by
                ) VALUES (
                    NULL, ?, ?, ?, 'super_admin', ?, 1, NOW(), NULL
                )
            ");
            
            $stmt->execute([
                $input['username'],
                $input['email'],
                $passwordHash,
                $input['full_name']
            ]);
            
            $userId = $db->lastInsertId();
            
            Logger::info('Bootstrap super admin created', [
                'user_id' => $userId,
                'username' => $input['username'],
                'ip' => $_SERVER['REMOTE_ADDR'] ?? 'unknown'
            ]);
            
            $this->sendSuccess([
                'message' => 'Super admin created successfully',
                'user_id' => $userId,
                'username' => $input['username'],
                'warning' => 'DISABLE THIS ENDPOINT IMMEDIATELY by removing the route'
            ]);
            
        } catch (\Exception $e) {
            Logger::error('Failed to bootstrap super admin', [
                'error' => $e->getMessage()
            ]);
            $this->sendError('Failed to create super admin', [], 500);
        }
    }

    // =====================================================
    // UTILITY METHODS
    // =====================================================

    private function getJsonInput(): array {
        $json = file_get_contents('php://input');
        $data = json_decode($json, true);
        
        if (json_last_error() !== JSON_ERROR_NONE) {
            $this->sendError('Invalid JSON input', ['json_error' => json_last_error_msg()], 400);
            exit;
        }

        return $data ?? [];
    }

    private function sendSuccess(array $data, int $code = 200): void {
        http_response_code($code);
        echo json_encode([
            'success' => true,
            'data' => $data,
            'timestamp' => date('c')
        ], JSON_PRETTY_PRINT);
    }

    private function sendError(string $message, mixed $details = [], int $code = 400): void {
        http_response_code($code);
        echo json_encode([
            'success' => false,
            'message' => $message,
            'details' => $details,
            'timestamp' => date('c')
        ], JSON_PRETTY_PRINT);
    }
}